工作区  暂存区  版本库 远程版本库



移除某些配置信息
git config --unset user.email

一.本地仓库初始化
git init
##创建版本库
$ git init
##从远程库克隆
远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
二.设置签名
1.项目级别
git config user.name zhang
git config user.email 222@qq.com
2.全局级别
git config --global user.name zp
git config --global user.email 29138386@qq.com
##查看用户名和邮箱地址
$ git config user.name
$ git config user.email
查看全部的配置信息
git config -l

签名用于标识开发者身份，如远端仓库显示的提交者
签名使用就近原则，项目级别优先于全局
git配置信息保存在 .git/config 文件

三.查看工作区、暂存区状态
git status

四、提交文件
git add <file>
   git add index.html about.html
   先将指定文件添加到 暂存区，然后提交所有 暂存区 的文件
   git add . 命令让git把当前目录及子目录中的文件都添加到版本库中
   注意，可反复多次使用，添加多个文件
git commit -m <message>
  告诉Git，把文件提交到仓库
  -m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

  为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件
  
了解：
  可以提交分别来自不同地方的文件，比如 工作区的 和 暂存区的
  git commit -o index.html about.html -m '我同时提交了 工作区的index.html 和 暂存区的about.html 这两个文件'

##工作区和暂存区
上面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改从工作区添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到版本库（对象库）当前分支。

五、查看提交记录
git log 
   显示版本库里一系列单独提交的日志
git log pretty=oneline 最简模式查看提交记录
git log oneline 精简模式查看提交记录
git reflog 比较多的信息查看提交记录 此方式回滚时比较方便

了解 git show 
	git show  xxxxxxxx 查看提交的详细信息
了解  git diff xxxxx01  xxxxxx02 
	git diff 28586adb438999fa00263e27767332c8020f6a47 03ff0fef64450b79f6092adfb8613660f876517f查看提交差异
gitk  查看提交图
    可以通过查看提交图，直观看到git show  git  diff 结果
了解：
git blame 定位代码责任人
git bisect 查找问题引入版本
git grep 查找指定内容的位置
git log 查找指定内容的历史记录

六、版本回退

git reset --hard [索引值]
git reset  --hard  HEAD
reset 命令三个参数对比
--soft 在本地库移动指针
--mixed 在本地库移动指针，重置暂存区
--hard 在本地库移动指针，重置暂存区，重置工作区

$ git reset --hard HEAD
顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在哪
现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
$ git reflog

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

##撤销修改
只在工作区进行了修改，进行还原
   git checkout -- file。
   git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

工作区修改->暂存区，进行还原
   第一步用命令git reset HEAD <file>，就回到了工作区
   第二部：git checkout -- file。 工作区还原

已经提交到版本库，进行还原： 
   git log   git relog
*****git reset --hard HEAD

七、推送分支
git push origin master
  每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
  ##第一次推送数据到远端需要认证
*** Please tell me who you are.
Run
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"



git  rm  git commit 
    删除版本库的文件
git mv  git commit 
    重命名文件

删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test.txt


   


##分支管理
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


##无法切换分支；
分支无法切换时可以先stash或者commit这个分支在切换：

常用git stash命令：
（1）git stash save "save message"  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。
（2）git stash list  ：查看stash了哪些存储
（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}
（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p
（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} 
（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}
（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储
（8）git stash clear ：删除所有缓存的stash


git切换分支报错 :error: pathspec 'origin/XXX' did not match any file known to git.
解决方法： 
1、执行命令git fetch取回所有分支的更新
2、执行git branch -a可以看到test分支（已经更新分支信息）
3、切换分支git checkout test

推送分支：
推送分支，就是把该分支上的所有本地提交推送到远程库。
$ git push origin master
如果要推送其他分支，比如dev，就改成
$ git push origin dev

##git fetch 和git pull 的差别
1、git fetch 相当于是从远程获取最新到本地，不会自动merge，如下指令： 
2. git pull：相当于是从远程获取最新版本并merge到本地
git pull origin master
git pull 相当于从远程获取最新版本并merge到本地



